#!/bin/bash


function usage {
	echo "Usage $0 <options> <in tar file(s)>"
	echo ""
	echo " Optional arguments:"
	echo "  -c <study_cfg>: Specify study cfg (default: looks up study_cfg using tar name)"
	echo "  -k: Keep tar files in original folder (default: move tar files to BIDS/sourcedata)"
	echo "  -S: Override SUBJ_EXPR - note must include {subject} (default: uses study_cfg definition)"
	echo "  -B: Override BIDS_DIR  (default: uses study_cfg definition)"
}
	#option for specifying study_cfg

if [ "$#" -lt 1 ]
then
  usage;
  exit 1;
fi

testmode=0
study_cfg=""
nomove_tar=0

opts="" #options for neuroglia/etc tools

while getopts "c:tk" options; do
 case $options in
    k ) echo "	Keeping tar files in original folder" >&2
	nomove_tar=1;;
    t ) echo "	Using test-mode (no submit jobs)" >&2
	testmode=1;;
    c ) echo "  Using custom study_cfg: $OPTARG" >&2
	study_cfg=$OPTARG;;
    * ) usage
	exit 1;;
 esac
done

shift $((OPTIND-1))
if [ "$#" -gt 1 ]
then
	single_subj=0
else
	single_subj=1
fi


if [ -n "$study_cfg" ]
then
	if [ ! -e $study_cfg ]
	then
		echo "ERROR in $0: study_cfg $study_cfg does not exist!"
		exit 1
	fi
	in_tar=$@
else

#if study_cfg not specified, then look it up, and make sure it is the same for all tar files..

in_tar=$1

if [ ! -e $in_tar ]
then
	echo "ERROR in $0: tarfile does not exist"
	echo $in_tar
	exit 1
fi


study_cfg=`$AUTOBIDS_DIR/getStudyCfg $in_tar`
in_folder=`realpath $in_tar`
in_folder=${in_folder%/*}

if [ ! $? = 0 ]
then
 echo "ERROR in $0"
 exit 1
fi


#if multiple tar files, make sure all point to same study cfg
if [ "$#" -gt 1 ]
then
	shift 1
	for tar in $@
	do
		if [ ! -e $tar ]
		then
			echo "ERROR in $0: tarfile does not exist"
			echo $tar
			exit 1
		fi


		cfg=`$AUTOBIDS_DIR/getStudyCfg $tar`
		if [ ! "$cfg" = "$study_cfg" ]
		then
			echo "ERROR in $0, study_cfg not same for all tar files"
			echo "$cfg != $study_cfg"
			exit 1
		fi
		
		#add check to make sure tars are coming from same folder (in_folder)

		in_tar="$in_tar $tar"
	done

fi #if multiple tars

fi #if study_cfg defined..

source $study_cfg
#add checks here to ensure all required variables are set:
if [ ! -n $BIDS_DIR ]
then
	echo ERROR in $0: BIDS_DIR not defined in $study_cfg
	exit 1
fi

if [ ! -n $SUBJ_EXPR ]
then
	echo ERROR in $0: SUBJ_EXPR not defined in $study_cfg
	exit 1
fi
if [ -n $HEURISTIC ]
then
	if [ ! -e $HEURISTIC ]
	then
		echo ERROR in $0:  $HEURISTIC not found
		exit 1
	fi
else
	echo ERROR in $0: HEURISTIC not defined in $study_cfg
	exit 1
fi

#optional: POST_BIDS_SCRIPT, EMAIL_NOTIFICATION
if [ -n $POST_BIDS_SCRIPT ]
then
	if [ ! -e $POST_BIDS_SCRIPTS ]
	then
		echo ERROR in $0: $POST_BIDS_SCRIPTS not found
		exit 1
	fi
fi

echo ""
echo "BIDS_DIR: $BIDS_DIR"
echo ""



if [ "$single_subj" = "0" -a -e $BIDS_DIR ]
then
 echo "Processing multiple subjects into an existing BIDS_DIR"
 #maybe add an exception later..
fi

code_dir=$BIDS_DIR/code
sourcedata=$BIDS_DIR/sourcedata
mkdir -p $code_dir $sourcedata

subjlist=$code_dir/subjects-list_`date +%Y-%m-%d_%H.%M`.txt
validator_out=$code_dir/bids-validator_`date +%Y-%m-%d_%H.%M`.txt

for tar in $in_tar
do
	filename=${tar##*/}
	folder=${tar%/*}


	subjid=`$AUTOBIDS_DIR/getSubjID $SUBJ_EXPR $filename`
	if [ ! $? = 0 ]
	then
		echo ERROR in $0: no matching subjid in tar
		echo tar: $tar study_cfg: $study_cfg
		echo $subjid
		exit 1
	fi

	#move tar to source data
	if [ $nomove_tar = 0 -o $testmode = 1 ]
	then
		mv -v $tar $sourcedata
		tar_dir=$sourcedata
	else
		tar_dir=$folder
	fi

#	if [ -e $BIDS_DIR/sub-$subjid -a $testmode = 0 ]
#	then	
#		echo "DELETING EXISTING FOLDER BEFORE OVERWRITING: $BIDS_DIR/sub-$subjid"
#		rm -rf $BIDS_DIR/sub-$subjid
#		rm -rf $BIDS_DIR/.heudiconv/$subjid
#	fi

	#compile subjid list
	echo $subjid >> $subjlist
done


pushd $code_dir > /dev/null

if [ "$testmode" = 1 ]
then
	opts="-t $opts"
fi

#heudiconv is always run:
job_dcm2bids=$(neurogliaBatch $opts heudiconv $subjlist -b "--overwrite -b -d $tar_dir/${SUBJ_EXPR} -o $BIDS_DIR -f $HEURISTIC -s" -j 2core8gb )


#testmode currently doesn't work for pre/post pipelines, need to pass that on to them..

#prebids pipeline (to create a "more" valid bids dataset) is optional:
if [ -n "$PRE_BIDS_PIPELINE" ] #run the pipeline referred to in study_cfg
then
job_prebids=$($PRE_BIDS_PIPELINE $BIDS_DIR $subjlist afterok:$job_dcm2bids)
else
job_prebids=$job_dcm2bids
fi


#postbids pipeline (to run on validated bids datasets) is optional:
if [ -n "$POST_BIDS_PIPELINE" ]
then
	echo submitting postbids pipeline
echo $POST_BIDS_PIPELINE $BIDS_DIR $subjlist afterok:$job_prebids 
job_postbids=$($POST_BIDS_PIPELINE $BIDS_DIR $subjlist afterok:$job_prebids )
else
	echo not submitting postbids pipeline
echo $POST_BIDS_PIPELINE $BIDS_DIR $subjlist afterok:$job_prebids 
job_postbids=$job_prebids #carry over dependencies
fi

#run bids-validator,  but wait for it to finish to send a confirmation e-mail (depends on heudiconv and prebids finishing)
job_validator=$(neurogliaSubmit -j ShortSkinny -d afterok:$job_prebids bids-validator $BIDS_DIR \> $validator_out )



#send e-mail notification with bids-validator output 
#if [ -n "$EMAIL_NOTIFICATION" ]
#then
#cat $validator_out | mail -s "AutoBIDS: conversion complete"  $email_address
#fi

popd > /dev/null

exit 0
